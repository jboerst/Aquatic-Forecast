---
output: 
  github_document:
    df_print: tibble
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```

# neon4cast

<!-- badges: start -->
  [![R-CMD-check](https://github.com/eco4cast/neon4cast/workflows/R-CMD-check/badge.svg)](https://github.com/eco4cast/neon4cast/actions)
<!-- badges: end -->

`neon4cast` provides a collection of convenient helper utilities for anyone entering the EFI NEON Forecasting Challenge.  

## Installation

You can install the development version from [GitHub](https://github.com/) with:

``` {r}
install.packages("remotes")
remotes::install_github("eco4cast/neon4cast")
remotes::install_github("LKremer/ggpointdensity")
install.packages("xts")
install.packages(c("tidyverse", "fable", "tsibble"))
install.packages("cronR")
install.packages("ggplot2")
install.packages("lubridate")
```


## Examples

```{r message=FALSE}
library(neon4cast)
library(tidyverse)
library(fable)
library(tsibble)
library(ggplot2)
library(ggpointdensity)
library(xts)
library(lubridate)
```

Download and read in the current target file for the Aquatics theme.  For convenience, we read this in as 
a timeseries object, noting that the time is in the 'time' column, and timeseries are replicated over sites.

```{r, message=FALSE}
aquatic <- read_csv("https://data.ecoforecast.org/targets/aquatics/aquatics-targets.csv.gz") %>% 
  as_tsibble(index=time, key=c(siteID, depth_temperature))
head(aquatic)
```


```{r, message = FALSE}
# drop last 35 days and use explicit NAs for gaps in timeseries
blinded_aquatic <- aquatic %>% filter(time < max(time) - 35) %>% fill_gaps()

# A simple random walk forecast, see ?fable::RW
oxygen_fc <- blinded_aquatic %>%
  model(null = RW(oxygen)) %>%
  forecast(h = "35 days") %>%
  efi_format()

## also use random walk for temperature
temperature_fc <- blinded_aquatic  %>%
  model(null = RW(temperature)) %>%
  forecast(h = "35 days") %>%
  efi_format()

# combine into single table, drop the .model column
forecast <- inner_join(oxygen_fc, temperature_fc) %>% select(-ensemble)
## Write the forecast to a file following EFI naming conventions:
forecast_file <- glue::glue("{theme}-{date}-{team}.csv.gz",
                            theme = "aquatics", 
                            date=Sys.Date(),
                            team = "example_null")
write_csv(forecast, forecast_file)
```


### Score forecast locally

Scores for valid forecasts should appear at <https://shiny.ecoforecast.org> the day after they are submitted.  However, it is often more convenient to generate scores locally. Note that the "score" simply the `crps_sample` (for ensemble forecasts) or `crps_norm` (for summary statistic forecasts) score from the
`scoringRules` R package, for each unique prediction (i.e. day/site/variable tuple). 

Note that scores are only possible once the data becomes available in the corresponding targets file! 

```{r message=FALSE}
forecast$theme <- "aquatics"
scores <- score(forecast)
# The resulting data.frame scores each day for each site, but is also easy to summarize:
scores %>% 
  group_by(siteID, target) %>% 
  summarise(mean_crps = mean(crps, na.rm=TRUE),
            mean_logs =  mean(logs, na.rm=TRUE))
```

### Validate a forecast file

Validating a forecast file runs the same automated checks as the EFI server, verifying that the 
data is in the correct format for the appropriate challenge.  Helpful errors or warnings will 
displayed on any invalid formats.  Note that the validator accepts files in `.csv` (optionally 
compressed as `.csv.gz`) or netcdf.

```{r}
forecast_output_validator(forecast_file)
```

### Generate forecast metadata in EML

```{r}
create_model_metadata(forecast_file)
```

### Access EFI snapshots of NOAA forecasts at NEON sites

Many forecasts will want to make use of weather forecasts as potential drivers. EFI downscales NOAA GEFS 35-day forecast products at each NEON site and makes this data available. These helper functions provide convenient access for downloading and stacking the individual forecast files. 


### Submit a forecast

When you are ready to submit your forecast to EFI:

```{r}
submit(forecast_file)
```

Ideally you should include the optional `metadata = ` argument with your metadata file. 

### Other functions

Encountered a bug?  Facing another challenge in participating in the challenge? Developed a cool approach you would like to share with the community? Open an [issue](https://github.com/eco4cast/neon4cast/issues) or [pull request](https://github.com/eco4cast/neon4cast/pulls) here!


```{r include=FALSE}
unlink(forecast_file)
```
